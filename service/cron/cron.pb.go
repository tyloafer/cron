// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cron.proto

package CronService

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The request message containing the user's name.
type CronReq struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CronReq) Reset()         { *m = CronReq{} }
func (m *CronReq) String() string { return proto.CompactTextString(m) }
func (*CronReq) ProtoMessage()    {}
func (*CronReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_cron_aa017e88c9209f3d, []int{0}
}
func (m *CronReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CronReq.Unmarshal(m, b)
}
func (m *CronReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CronReq.Marshal(b, m, deterministic)
}
func (dst *CronReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CronReq.Merge(dst, src)
}
func (m *CronReq) XXX_Size() int {
	return xxx_messageInfo_CronReq.Size(m)
}
func (m *CronReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CronReq.DiscardUnknown(m)
}

var xxx_messageInfo_CronReq proto.InternalMessageInfo

func (m *CronReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// The response message containing the greetings
type CronResp struct {
	Code                 int64    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg                  string   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CronResp) Reset()         { *m = CronResp{} }
func (m *CronResp) String() string { return proto.CompactTextString(m) }
func (*CronResp) ProtoMessage()    {}
func (*CronResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_cron_aa017e88c9209f3d, []int{1}
}
func (m *CronResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CronResp.Unmarshal(m, b)
}
func (m *CronResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CronResp.Marshal(b, m, deterministic)
}
func (dst *CronResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CronResp.Merge(dst, src)
}
func (m *CronResp) XXX_Size() int {
	return xxx_messageInfo_CronResp.Size(m)
}
func (m *CronResp) XXX_DiscardUnknown() {
	xxx_messageInfo_CronResp.DiscardUnknown(m)
}

var xxx_messageInfo_CronResp proto.InternalMessageInfo

func (m *CronResp) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *CronResp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func init() {
	proto.RegisterType((*CronReq)(nil), "CronService.CronReq")
	proto.RegisterType((*CronResp)(nil), "CronService.CronResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CronClient is the client API for Cron service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CronClient interface {
	// Sends a greeting
	Scheduler(ctx context.Context, in *CronReq, opts ...grpc.CallOption) (*CronResp, error)
}

type cronClient struct {
	cc *grpc.ClientConn
}

func NewCronClient(cc *grpc.ClientConn) CronClient {
	return &cronClient{cc}
}

func (c *cronClient) Scheduler(ctx context.Context, in *CronReq, opts ...grpc.CallOption) (*CronResp, error) {
	out := new(CronResp)
	err := c.cc.Invoke(ctx, "/CronService.Cron/Scheduler", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CronServer is the server API for Cron service.
type CronServer interface {
	// Sends a greeting
	Scheduler(context.Context, *CronReq) (*CronResp, error)
}

func RegisterCronServer(s *grpc.Server, srv CronServer) {
	s.RegisterService(&_Cron_serviceDesc, srv)
}

func _Cron_Scheduler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CronReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CronServer).Scheduler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CronService.Cron/Scheduler",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CronServer).Scheduler(ctx, req.(*CronReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Cron_serviceDesc = grpc.ServiceDesc{
	ServiceName: "CronService.Cron",
	HandlerType: (*CronServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Scheduler",
			Handler:    _Cron_Scheduler_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cron.proto",
}

func init() { proto.RegisterFile("cron.proto", fileDescriptor_cron_aa017e88c9209f3d) }

var fileDescriptor_cron_aa017e88c9209f3d = []byte{
	// 146 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4a, 0x2e, 0xca, 0xcf,
	0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x76, 0x2e, 0xca, 0xcf, 0x0b, 0x4e, 0x2d, 0x2a,
	0xcb, 0x4c, 0x4e, 0x55, 0x92, 0xe5, 0x62, 0x07, 0x71, 0x83, 0x52, 0x0b, 0x85, 0x84, 0xb8, 0x58,
	0xf2, 0x12, 0x73, 0x53, 0x25, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0xc0, 0x6c, 0x25, 0x03, 0x2e,
	0x0e, 0x88, 0x74, 0x71, 0x01, 0x48, 0x3e, 0x39, 0x3f, 0x05, 0x22, 0xcf, 0x1c, 0x04, 0x66, 0x0b,
	0x09, 0x70, 0x31, 0xe7, 0x16, 0xa7, 0x4b, 0x30, 0x81, 0xb5, 0x80, 0x98, 0x46, 0x4e, 0x5c, 0x2c,
	0x20, 0x1d, 0x42, 0x56, 0x5c, 0x9c, 0xc1, 0xc9, 0x19, 0xa9, 0x29, 0xa5, 0x39, 0xa9, 0x45, 0x42,
	0x22, 0x7a, 0x48, 0x76, 0xea, 0x41, 0x2d, 0x94, 0x12, 0xc5, 0x22, 0x5a, 0x5c, 0xa0, 0xc4, 0x90,
	0xc4, 0x06, 0x76, 0xa8, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x45, 0x01, 0xa8, 0xc7, 0xb6, 0x00,
	0x00, 0x00,
}
